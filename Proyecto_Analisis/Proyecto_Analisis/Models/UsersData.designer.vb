'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Analisis_BD")>  _
Partial Public Class UsersDataDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertbodega(instance As bodega)
    End Sub
  Partial Private Sub Updatebodega(instance As bodega)
    End Sub
  Partial Private Sub Deletebodega(instance As bodega)
    End Sub
  Partial Private Sub Insertdetalle_orden(instance As detalle_orden)
    End Sub
  Partial Private Sub Updatedetalle_orden(instance As detalle_orden)
    End Sub
  Partial Private Sub Deletedetalle_orden(instance As detalle_orden)
    End Sub
  Partial Private Sub Insertdetalle_traslado(instance As detalle_traslado)
    End Sub
  Partial Private Sub Updatedetalle_traslado(instance As detalle_traslado)
    End Sub
  Partial Private Sub Deletedetalle_traslado(instance As detalle_traslado)
    End Sub
  Partial Private Sub Insertdocumento(instance As documento)
    End Sub
  Partial Private Sub Updatedocumento(instance As documento)
    End Sub
  Partial Private Sub Deletedocumento(instance As documento)
    End Sub
  Partial Private Sub Insertempresa(instance As empresa)
    End Sub
  Partial Private Sub Updateempresa(instance As empresa)
    End Sub
  Partial Private Sub Deleteempresa(instance As empresa)
    End Sub
  Partial Private Sub Insertinventario(instance As inventario)
    End Sub
  Partial Private Sub Updateinventario(instance As inventario)
    End Sub
  Partial Private Sub Deleteinventario(instance As inventario)
    End Sub
  Partial Private Sub Insertorden_compra(instance As orden_compra)
    End Sub
  Partial Private Sub Updateorden_compra(instance As orden_compra)
    End Sub
  Partial Private Sub Deleteorden_compra(instance As orden_compra)
    End Sub
  Partial Private Sub Insertorigen(instance As origen)
    End Sub
  Partial Private Sub Updateorigen(instance As origen)
    End Sub
  Partial Private Sub Deleteorigen(instance As origen)
    End Sub
  Partial Private Sub Insertproductos(instance As productos)
    End Sub
  Partial Private Sub Updateproductos(instance As productos)
    End Sub
  Partial Private Sub Deleteproductos(instance As productos)
    End Sub
  Partial Private Sub Inserttipo_documento(instance As tipo_documento)
    End Sub
  Partial Private Sub Updatetipo_documento(instance As tipo_documento)
    End Sub
  Partial Private Sub Deletetipo_documento(instance As tipo_documento)
    End Sub
  Partial Private Sub Inserttraslado(instance As traslado)
    End Sub
  Partial Private Sub Updatetraslado(instance As traslado)
    End Sub
  Partial Private Sub Deletetraslado(instance As traslado)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("Analisis_BDConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property bodega() As System.Data.Linq.Table(Of bodega)
		Get
			Return Me.GetTable(Of bodega)
		End Get
	End Property
	
	Public ReadOnly Property detalle_orden() As System.Data.Linq.Table(Of detalle_orden)
		Get
			Return Me.GetTable(Of detalle_orden)
		End Get
	End Property
	
	Public ReadOnly Property detalle_traslado() As System.Data.Linq.Table(Of detalle_traslado)
		Get
			Return Me.GetTable(Of detalle_traslado)
		End Get
	End Property
	
	Public ReadOnly Property documento() As System.Data.Linq.Table(Of documento)
		Get
			Return Me.GetTable(Of documento)
		End Get
	End Property
	
	Public ReadOnly Property empresa() As System.Data.Linq.Table(Of empresa)
		Get
			Return Me.GetTable(Of empresa)
		End Get
	End Property
	
	Public ReadOnly Property inventario() As System.Data.Linq.Table(Of inventario)
		Get
			Return Me.GetTable(Of inventario)
		End Get
	End Property
	
	Public ReadOnly Property orden_compra() As System.Data.Linq.Table(Of orden_compra)
		Get
			Return Me.GetTable(Of orden_compra)
		End Get
	End Property
	
	Public ReadOnly Property origen() As System.Data.Linq.Table(Of origen)
		Get
			Return Me.GetTable(Of origen)
		End Get
	End Property
	
	Public ReadOnly Property productos() As System.Data.Linq.Table(Of productos)
		Get
			Return Me.GetTable(Of productos)
		End Get
	End Property
	
	Public ReadOnly Property tipo_documento() As System.Data.Linq.Table(Of tipo_documento)
		Get
			Return Me.GetTable(Of tipo_documento)
		End Get
	End Property
	
	Public ReadOnly Property traslado() As System.Data.Linq.Table(Of traslado)
		Get
			Return Me.GetTable(Of traslado)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.bodega")>  _
Partial Public Class bodega
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _bod_id As Integer
	
	Private _bod_nombre As String
	
	Private _bod_direccion As String
	
	Private _emp_id As System.Nullable(Of Integer)
	
	Private _ori_id As System.Nullable(Of Integer)
	
	Private _documento As EntitySet(Of documento)
	
	Private _inventario As EntitySet(Of inventario)
	
	Private _orden_compra As EntitySet(Of orden_compra)
	
	Private _traslado As EntitySet(Of traslado)
	
	Private _empresa As EntityRef(Of empresa)
	
	Private _origen As EntityRef(Of origen)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onbod_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onbod_idChanged()
    End Sub
    Partial Private Sub Onbod_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onbod_nombreChanged()
    End Sub
    Partial Private Sub Onbod_direccionChanging(value As String)
    End Sub
    Partial Private Sub Onbod_direccionChanged()
    End Sub
    Partial Private Sub Onemp_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onemp_idChanged()
    End Sub
    Partial Private Sub Onori_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onori_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._documento = New EntitySet(Of documento)(AddressOf Me.attach_documento, AddressOf Me.detach_documento)
		Me._inventario = New EntitySet(Of inventario)(AddressOf Me.attach_inventario, AddressOf Me.detach_inventario)
		Me._orden_compra = New EntitySet(Of orden_compra)(AddressOf Me.attach_orden_compra, AddressOf Me.detach_orden_compra)
		Me._traslado = New EntitySet(Of traslado)(AddressOf Me.attach_traslado, AddressOf Me.detach_traslado)
		Me._empresa = CType(Nothing, EntityRef(Of empresa))
		Me._origen = CType(Nothing, EntityRef(Of origen))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bod_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property bod_id() As Integer
		Get
			Return Me._bod_id
		End Get
		Set
			If ((Me._bod_id = value)  _
						= false) Then
				Me.Onbod_idChanging(value)
				Me.SendPropertyChanging
				Me._bod_id = value
				Me.SendPropertyChanged("bod_id")
				Me.Onbod_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bod_nombre", DbType:="VarChar(30)")>  _
	Public Property bod_nombre() As String
		Get
			Return Me._bod_nombre
		End Get
		Set
			If (String.Equals(Me._bod_nombre, value) = false) Then
				Me.Onbod_nombreChanging(value)
				Me.SendPropertyChanging
				Me._bod_nombre = value
				Me.SendPropertyChanged("bod_nombre")
				Me.Onbod_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bod_direccion", DbType:="VarChar(45)")>  _
	Public Property bod_direccion() As String
		Get
			Return Me._bod_direccion
		End Get
		Set
			If (String.Equals(Me._bod_direccion, value) = false) Then
				Me.Onbod_direccionChanging(value)
				Me.SendPropertyChanging
				Me._bod_direccion = value
				Me.SendPropertyChanged("bod_direccion")
				Me.Onbod_direccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_emp_id", DbType:="Int")>  _
	Public Property emp_id() As System.Nullable(Of Integer)
		Get
			Return Me._emp_id
		End Get
		Set
			If (Me._emp_id.Equals(value) = false) Then
				If Me._empresa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onemp_idChanging(value)
				Me.SendPropertyChanging
				Me._emp_id = value
				Me.SendPropertyChanged("emp_id")
				Me.Onemp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ori_id", DbType:="Int")>  _
	Public Property ori_id() As System.Nullable(Of Integer)
		Get
			Return Me._ori_id
		End Get
		Set
			If (Me._ori_id.Equals(value) = false) Then
				If Me._origen.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onori_idChanging(value)
				Me.SendPropertyChanging
				Me._ori_id = value
				Me.SendPropertyChanged("ori_id")
				Me.Onori_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="bodega_documento", Storage:="_documento", ThisKey:="bod_id", OtherKey:="bod_id")>  _
	Public Property documento() As EntitySet(Of documento)
		Get
			Return Me._documento
		End Get
		Set
			Me._documento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="bodega_inventario", Storage:="_inventario", ThisKey:="bod_id", OtherKey:="bod_id")>  _
	Public Property inventario() As EntitySet(Of inventario)
		Get
			Return Me._inventario
		End Get
		Set
			Me._inventario.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="bodega_orden_compra", Storage:="_orden_compra", ThisKey:="bod_id", OtherKey:="bod_id")>  _
	Public Property orden_compra() As EntitySet(Of orden_compra)
		Get
			Return Me._orden_compra
		End Get
		Set
			Me._orden_compra.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="bodega_traslado", Storage:="_traslado", ThisKey:="bod_id", OtherKey:="bod_id")>  _
	Public Property traslado() As EntitySet(Of traslado)
		Get
			Return Me._traslado
		End Get
		Set
			Me._traslado.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_bodega", Storage:="_empresa", ThisKey:="emp_id", OtherKey:="emp_id", IsForeignKey:=true)>  _
	Public Property empresa() As empresa
		Get
			Return Me._empresa.Entity
		End Get
		Set
			Dim previousValue As empresa = Me._empresa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._empresa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._empresa.Entity = Nothing
					previousValue.bodega.Remove(Me)
				End If
				Me._empresa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.bodega.Add(Me)
					Me._emp_id = value.emp_id
				Else
					Me._emp_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("empresa")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="origen_bodega", Storage:="_origen", ThisKey:="ori_id", OtherKey:="ori_id", IsForeignKey:=true)>  _
	Public Property origen() As origen
		Get
			Return Me._origen.Entity
		End Get
		Set
			Dim previousValue As origen = Me._origen.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._origen.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._origen.Entity = Nothing
					previousValue.bodega.Remove(Me)
				End If
				Me._origen.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.bodega.Add(Me)
					Me._ori_id = value.ori_id
				Else
					Me._ori_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("origen")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_documento(ByVal entity As documento)
		Me.SendPropertyChanging
		entity.bodega = Me
	End Sub
	
	Private Sub detach_documento(ByVal entity As documento)
		Me.SendPropertyChanging
		entity.bodega = Nothing
	End Sub
	
	Private Sub attach_inventario(ByVal entity As inventario)
		Me.SendPropertyChanging
		entity.bodega = Me
	End Sub
	
	Private Sub detach_inventario(ByVal entity As inventario)
		Me.SendPropertyChanging
		entity.bodega = Nothing
	End Sub
	
	Private Sub attach_orden_compra(ByVal entity As orden_compra)
		Me.SendPropertyChanging
		entity.bodega = Me
	End Sub
	
	Private Sub detach_orden_compra(ByVal entity As orden_compra)
		Me.SendPropertyChanging
		entity.bodega = Nothing
	End Sub
	
	Private Sub attach_traslado(ByVal entity As traslado)
		Me.SendPropertyChanging
		entity.bodega = Me
	End Sub
	
	Private Sub detach_traslado(ByVal entity As traslado)
		Me.SendPropertyChanging
		entity.bodega = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.detalle_orden")>  _
Partial Public Class detalle_orden
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _det_id As Integer
	
	Private _det_cantidad As System.Nullable(Of Integer)
	
	Private _det_precio As System.Nullable(Of Double)
	
	Private _det_total As System.Nullable(Of Double)
	
	Private _ord_id As System.Nullable(Of Integer)
	
	Private _pro_id As System.Nullable(Of Integer)
	
	Private _orden_compra As EntityRef(Of orden_compra)
	
	Private _productos As EntityRef(Of productos)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondet_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondet_idChanged()
    End Sub
    Partial Private Sub Ondet_cantidadChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondet_cantidadChanged()
    End Sub
    Partial Private Sub Ondet_precioChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Ondet_precioChanged()
    End Sub
    Partial Private Sub Ondet_totalChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Ondet_totalChanged()
    End Sub
    Partial Private Sub Onord_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onord_idChanged()
    End Sub
    Partial Private Sub Onpro_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onpro_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._orden_compra = CType(Nothing, EntityRef(Of orden_compra))
		Me._productos = CType(Nothing, EntityRef(Of productos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_det_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property det_id() As Integer
		Get
			Return Me._det_id
		End Get
		Set
			If ((Me._det_id = value)  _
						= false) Then
				Me.Ondet_idChanging(value)
				Me.SendPropertyChanging
				Me._det_id = value
				Me.SendPropertyChanged("det_id")
				Me.Ondet_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_det_cantidad", DbType:="Int")>  _
	Public Property det_cantidad() As System.Nullable(Of Integer)
		Get
			Return Me._det_cantidad
		End Get
		Set
			If (Me._det_cantidad.Equals(value) = false) Then
				Me.Ondet_cantidadChanging(value)
				Me.SendPropertyChanging
				Me._det_cantidad = value
				Me.SendPropertyChanged("det_cantidad")
				Me.Ondet_cantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_det_precio", DbType:="Float")>  _
	Public Property det_precio() As System.Nullable(Of Double)
		Get
			Return Me._det_precio
		End Get
		Set
			If (Me._det_precio.Equals(value) = false) Then
				Me.Ondet_precioChanging(value)
				Me.SendPropertyChanging
				Me._det_precio = value
				Me.SendPropertyChanged("det_precio")
				Me.Ondet_precioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_det_total", DbType:="Float")>  _
	Public Property det_total() As System.Nullable(Of Double)
		Get
			Return Me._det_total
		End Get
		Set
			If (Me._det_total.Equals(value) = false) Then
				Me.Ondet_totalChanging(value)
				Me.SendPropertyChanging
				Me._det_total = value
				Me.SendPropertyChanged("det_total")
				Me.Ondet_totalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ord_id", DbType:="Int")>  _
	Public Property ord_id() As System.Nullable(Of Integer)
		Get
			Return Me._ord_id
		End Get
		Set
			If (Me._ord_id.Equals(value) = false) Then
				If Me._orden_compra.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onord_idChanging(value)
				Me.SendPropertyChanging
				Me._ord_id = value
				Me.SendPropertyChanged("ord_id")
				Me.Onord_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pro_id", DbType:="Int")>  _
	Public Property pro_id() As System.Nullable(Of Integer)
		Get
			Return Me._pro_id
		End Get
		Set
			If (Me._pro_id.Equals(value) = false) Then
				If Me._productos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onpro_idChanging(value)
				Me.SendPropertyChanging
				Me._pro_id = value
				Me.SendPropertyChanged("pro_id")
				Me.Onpro_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="orden_compra_detalle_orden", Storage:="_orden_compra", ThisKey:="ord_id", OtherKey:="ord_id", IsForeignKey:=true)>  _
	Public Property orden_compra() As orden_compra
		Get
			Return Me._orden_compra.Entity
		End Get
		Set
			Dim previousValue As orden_compra = Me._orden_compra.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._orden_compra.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._orden_compra.Entity = Nothing
					previousValue.detalle_orden.Remove(Me)
				End If
				Me._orden_compra.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.detalle_orden.Add(Me)
					Me._ord_id = value.ord_id
				Else
					Me._ord_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("orden_compra")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="productos_detalle_orden", Storage:="_productos", ThisKey:="pro_id", OtherKey:="pro_id", IsForeignKey:=true)>  _
	Public Property productos() As productos
		Get
			Return Me._productos.Entity
		End Get
		Set
			Dim previousValue As productos = Me._productos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._productos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._productos.Entity = Nothing
					previousValue.detalle_orden.Remove(Me)
				End If
				Me._productos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.detalle_orden.Add(Me)
					Me._pro_id = value.pro_id
				Else
					Me._pro_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("productos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.detalle_traslado")>  _
Partial Public Class detalle_traslado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _detras_id As Integer
	
	Private _detras_cantidad As System.Nullable(Of Integer)
	
	Private _pro_id As System.Nullable(Of Integer)
	
	Private _tra_id As System.Nullable(Of Integer)
	
	Private _productos As EntityRef(Of productos)
	
	Private _traslado As EntityRef(Of traslado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondetras_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondetras_idChanged()
    End Sub
    Partial Private Sub Ondetras_cantidadChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondetras_cantidadChanged()
    End Sub
    Partial Private Sub Onpro_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onpro_idChanged()
    End Sub
    Partial Private Sub Ontra_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontra_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._productos = CType(Nothing, EntityRef(Of productos))
		Me._traslado = CType(Nothing, EntityRef(Of traslado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detras_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property detras_id() As Integer
		Get
			Return Me._detras_id
		End Get
		Set
			If ((Me._detras_id = value)  _
						= false) Then
				Me.Ondetras_idChanging(value)
				Me.SendPropertyChanging
				Me._detras_id = value
				Me.SendPropertyChanged("detras_id")
				Me.Ondetras_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detras_cantidad", DbType:="Int")>  _
	Public Property detras_cantidad() As System.Nullable(Of Integer)
		Get
			Return Me._detras_cantidad
		End Get
		Set
			If (Me._detras_cantidad.Equals(value) = false) Then
				Me.Ondetras_cantidadChanging(value)
				Me.SendPropertyChanging
				Me._detras_cantidad = value
				Me.SendPropertyChanged("detras_cantidad")
				Me.Ondetras_cantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pro_id", DbType:="Int")>  _
	Public Property pro_id() As System.Nullable(Of Integer)
		Get
			Return Me._pro_id
		End Get
		Set
			If (Me._pro_id.Equals(value) = false) Then
				If Me._productos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onpro_idChanging(value)
				Me.SendPropertyChanging
				Me._pro_id = value
				Me.SendPropertyChanged("pro_id")
				Me.Onpro_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tra_id", DbType:="Int")>  _
	Public Property tra_id() As System.Nullable(Of Integer)
		Get
			Return Me._tra_id
		End Get
		Set
			If (Me._tra_id.Equals(value) = false) Then
				If Me._traslado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ontra_idChanging(value)
				Me.SendPropertyChanging
				Me._tra_id = value
				Me.SendPropertyChanged("tra_id")
				Me.Ontra_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="productos_detalle_traslado", Storage:="_productos", ThisKey:="pro_id", OtherKey:="pro_id", IsForeignKey:=true)>  _
	Public Property productos() As productos
		Get
			Return Me._productos.Entity
		End Get
		Set
			Dim previousValue As productos = Me._productos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._productos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._productos.Entity = Nothing
					previousValue.detalle_traslado.Remove(Me)
				End If
				Me._productos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.detalle_traslado.Add(Me)
					Me._pro_id = value.pro_id
				Else
					Me._pro_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("productos")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="traslado_detalle_traslado", Storage:="_traslado", ThisKey:="tra_id", OtherKey:="tra_id", IsForeignKey:=true)>  _
	Public Property traslado() As traslado
		Get
			Return Me._traslado.Entity
		End Get
		Set
			Dim previousValue As traslado = Me._traslado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._traslado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._traslado.Entity = Nothing
					previousValue.detalle_traslado.Remove(Me)
				End If
				Me._traslado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.detalle_traslado.Add(Me)
					Me._tra_id = value.tra_id
				Else
					Me._tra_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("traslado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.documento")>  _
Partial Public Class documento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _doc_id As Integer
	
	Private _doc_fecha As System.Nullable(Of Date)
	
	Private _tip_id As System.Nullable(Of Integer)
	
	Private _bod_id As System.Nullable(Of Integer)
	
	Private _bodega As EntityRef(Of bodega)
	
	Private _tipo_documento As EntityRef(Of tipo_documento)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondoc_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondoc_idChanged()
    End Sub
    Partial Private Sub Ondoc_fechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ondoc_fechaChanged()
    End Sub
    Partial Private Sub Ontip_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontip_idChanged()
    End Sub
    Partial Private Sub Onbod_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onbod_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._bodega = CType(Nothing, EntityRef(Of bodega))
		Me._tipo_documento = CType(Nothing, EntityRef(Of tipo_documento))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_doc_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property doc_id() As Integer
		Get
			Return Me._doc_id
		End Get
		Set
			If ((Me._doc_id = value)  _
						= false) Then
				Me.Ondoc_idChanging(value)
				Me.SendPropertyChanging
				Me._doc_id = value
				Me.SendPropertyChanged("doc_id")
				Me.Ondoc_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_doc_fecha", DbType:="Date")>  _
	Public Property doc_fecha() As System.Nullable(Of Date)
		Get
			Return Me._doc_fecha
		End Get
		Set
			If (Me._doc_fecha.Equals(value) = false) Then
				Me.Ondoc_fechaChanging(value)
				Me.SendPropertyChanging
				Me._doc_fecha = value
				Me.SendPropertyChanged("doc_fecha")
				Me.Ondoc_fechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tip_id", DbType:="Int")>  _
	Public Property tip_id() As System.Nullable(Of Integer)
		Get
			Return Me._tip_id
		End Get
		Set
			If (Me._tip_id.Equals(value) = false) Then
				If Me._tipo_documento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ontip_idChanging(value)
				Me.SendPropertyChanging
				Me._tip_id = value
				Me.SendPropertyChanged("tip_id")
				Me.Ontip_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bod_id", DbType:="Int")>  _
	Public Property bod_id() As System.Nullable(Of Integer)
		Get
			Return Me._bod_id
		End Get
		Set
			If (Me._bod_id.Equals(value) = false) Then
				If Me._bodega.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onbod_idChanging(value)
				Me.SendPropertyChanging
				Me._bod_id = value
				Me.SendPropertyChanged("bod_id")
				Me.Onbod_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="bodega_documento", Storage:="_bodega", ThisKey:="bod_id", OtherKey:="bod_id", IsForeignKey:=true)>  _
	Public Property bodega() As bodega
		Get
			Return Me._bodega.Entity
		End Get
		Set
			Dim previousValue As bodega = Me._bodega.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._bodega.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._bodega.Entity = Nothing
					previousValue.documento.Remove(Me)
				End If
				Me._bodega.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.documento.Add(Me)
					Me._bod_id = value.bod_id
				Else
					Me._bod_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("bodega")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_documento_documento", Storage:="_tipo_documento", ThisKey:="tip_id", OtherKey:="tip_id", IsForeignKey:=true)>  _
	Public Property tipo_documento() As tipo_documento
		Get
			Return Me._tipo_documento.Entity
		End Get
		Set
			Dim previousValue As tipo_documento = Me._tipo_documento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipo_documento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipo_documento.Entity = Nothing
					previousValue.documento.Remove(Me)
				End If
				Me._tipo_documento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.documento.Add(Me)
					Me._tip_id = value.tip_id
				Else
					Me._tip_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipo_documento")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.empresa")>  _
Partial Public Class empresa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _emp_id As Integer
	
	Private _emp_nombre As String
	
	Private _emp_direccion As String
	
	Private _emp_telefono As String
	
	Private _bodega As EntitySet(Of bodega)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onemp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onemp_idChanged()
    End Sub
    Partial Private Sub Onemp_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onemp_nombreChanged()
    End Sub
    Partial Private Sub Onemp_direccionChanging(value As String)
    End Sub
    Partial Private Sub Onemp_direccionChanged()
    End Sub
    Partial Private Sub Onemp_telefonoChanging(value As String)
    End Sub
    Partial Private Sub Onemp_telefonoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._bodega = New EntitySet(Of bodega)(AddressOf Me.attach_bodega, AddressOf Me.detach_bodega)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_emp_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property emp_id() As Integer
		Get
			Return Me._emp_id
		End Get
		Set
			If ((Me._emp_id = value)  _
						= false) Then
				Me.Onemp_idChanging(value)
				Me.SendPropertyChanging
				Me._emp_id = value
				Me.SendPropertyChanged("emp_id")
				Me.Onemp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_emp_nombre", DbType:="VarChar(30)")>  _
	Public Property emp_nombre() As String
		Get
			Return Me._emp_nombre
		End Get
		Set
			If (String.Equals(Me._emp_nombre, value) = false) Then
				Me.Onemp_nombreChanging(value)
				Me.SendPropertyChanging
				Me._emp_nombre = value
				Me.SendPropertyChanged("emp_nombre")
				Me.Onemp_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_emp_direccion", DbType:="VarChar(45)")>  _
	Public Property emp_direccion() As String
		Get
			Return Me._emp_direccion
		End Get
		Set
			If (String.Equals(Me._emp_direccion, value) = false) Then
				Me.Onemp_direccionChanging(value)
				Me.SendPropertyChanging
				Me._emp_direccion = value
				Me.SendPropertyChanged("emp_direccion")
				Me.Onemp_direccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_emp_telefono", DbType:="VarChar(8)")>  _
	Public Property emp_telefono() As String
		Get
			Return Me._emp_telefono
		End Get
		Set
			If (String.Equals(Me._emp_telefono, value) = false) Then
				Me.Onemp_telefonoChanging(value)
				Me.SendPropertyChanging
				Me._emp_telefono = value
				Me.SendPropertyChanged("emp_telefono")
				Me.Onemp_telefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_bodega", Storage:="_bodega", ThisKey:="emp_id", OtherKey:="emp_id")>  _
	Public Property bodega() As EntitySet(Of bodega)
		Get
			Return Me._bodega
		End Get
		Set
			Me._bodega.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_bodega(ByVal entity As bodega)
		Me.SendPropertyChanging
		entity.empresa = Me
	End Sub
	
	Private Sub detach_bodega(ByVal entity As bodega)
		Me.SendPropertyChanging
		entity.empresa = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.inventario")>  _
Partial Public Class inventario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _inv_id As Integer
	
	Private _inv_cantidad As System.Nullable(Of Integer)
	
	Private _inv_costo_promedio As System.Nullable(Of Double)
	
	Private _pro_id As System.Nullable(Of Integer)
	
	Private _bod_id As System.Nullable(Of Integer)
	
	Private _bodega As EntityRef(Of bodega)
	
	Private _productos As EntityRef(Of productos)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oninv_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oninv_idChanged()
    End Sub
    Partial Private Sub Oninv_cantidadChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oninv_cantidadChanged()
    End Sub
    Partial Private Sub Oninv_costo_promedioChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Oninv_costo_promedioChanged()
    End Sub
    Partial Private Sub Onpro_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onpro_idChanged()
    End Sub
    Partial Private Sub Onbod_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onbod_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._bodega = CType(Nothing, EntityRef(Of bodega))
		Me._productos = CType(Nothing, EntityRef(Of productos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inv_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property inv_id() As Integer
		Get
			Return Me._inv_id
		End Get
		Set
			If ((Me._inv_id = value)  _
						= false) Then
				Me.Oninv_idChanging(value)
				Me.SendPropertyChanging
				Me._inv_id = value
				Me.SendPropertyChanged("inv_id")
				Me.Oninv_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inv_cantidad", DbType:="Int")>  _
	Public Property inv_cantidad() As System.Nullable(Of Integer)
		Get
			Return Me._inv_cantidad
		End Get
		Set
			If (Me._inv_cantidad.Equals(value) = false) Then
				Me.Oninv_cantidadChanging(value)
				Me.SendPropertyChanging
				Me._inv_cantidad = value
				Me.SendPropertyChanged("inv_cantidad")
				Me.Oninv_cantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inv_costo_promedio", DbType:="Float")>  _
	Public Property inv_costo_promedio() As System.Nullable(Of Double)
		Get
			Return Me._inv_costo_promedio
		End Get
		Set
			If (Me._inv_costo_promedio.Equals(value) = false) Then
				Me.Oninv_costo_promedioChanging(value)
				Me.SendPropertyChanging
				Me._inv_costo_promedio = value
				Me.SendPropertyChanged("inv_costo_promedio")
				Me.Oninv_costo_promedioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pro_id", DbType:="Int")>  _
	Public Property pro_id() As System.Nullable(Of Integer)
		Get
			Return Me._pro_id
		End Get
		Set
			If (Me._pro_id.Equals(value) = false) Then
				If Me._productos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onpro_idChanging(value)
				Me.SendPropertyChanging
				Me._pro_id = value
				Me.SendPropertyChanged("pro_id")
				Me.Onpro_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bod_id", DbType:="Int")>  _
	Public Property bod_id() As System.Nullable(Of Integer)
		Get
			Return Me._bod_id
		End Get
		Set
			If (Me._bod_id.Equals(value) = false) Then
				If Me._bodega.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onbod_idChanging(value)
				Me.SendPropertyChanging
				Me._bod_id = value
				Me.SendPropertyChanged("bod_id")
				Me.Onbod_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="bodega_inventario", Storage:="_bodega", ThisKey:="bod_id", OtherKey:="bod_id", IsForeignKey:=true)>  _
	Public Property bodega() As bodega
		Get
			Return Me._bodega.Entity
		End Get
		Set
			Dim previousValue As bodega = Me._bodega.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._bodega.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._bodega.Entity = Nothing
					previousValue.inventario.Remove(Me)
				End If
				Me._bodega.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.inventario.Add(Me)
					Me._bod_id = value.bod_id
				Else
					Me._bod_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("bodega")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="productos_inventario", Storage:="_productos", ThisKey:="pro_id", OtherKey:="pro_id", IsForeignKey:=true)>  _
	Public Property productos() As productos
		Get
			Return Me._productos.Entity
		End Get
		Set
			Dim previousValue As productos = Me._productos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._productos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._productos.Entity = Nothing
					previousValue.inventario.Remove(Me)
				End If
				Me._productos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.inventario.Add(Me)
					Me._pro_id = value.pro_id
				Else
					Me._pro_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("productos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.orden_compra")>  _
Partial Public Class orden_compra
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ord_id As Integer
	
	Private _ord_nombre As String
	
	Private _ord_fecha As System.Nullable(Of Date)
	
	Private _bod_id As System.Nullable(Of Integer)
	
	Private _detalle_orden As EntitySet(Of detalle_orden)
	
	Private _bodega As EntityRef(Of bodega)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onord_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onord_idChanged()
    End Sub
    Partial Private Sub Onord_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onord_nombreChanged()
    End Sub
    Partial Private Sub Onord_fechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onord_fechaChanged()
    End Sub
    Partial Private Sub Onbod_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onbod_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._detalle_orden = New EntitySet(Of detalle_orden)(AddressOf Me.attach_detalle_orden, AddressOf Me.detach_detalle_orden)
		Me._bodega = CType(Nothing, EntityRef(Of bodega))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ord_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ord_id() As Integer
		Get
			Return Me._ord_id
		End Get
		Set
			If ((Me._ord_id = value)  _
						= false) Then
				Me.Onord_idChanging(value)
				Me.SendPropertyChanging
				Me._ord_id = value
				Me.SendPropertyChanged("ord_id")
				Me.Onord_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ord_nombre", DbType:="VarChar(30)")>  _
	Public Property ord_nombre() As String
		Get
			Return Me._ord_nombre
		End Get
		Set
			If (String.Equals(Me._ord_nombre, value) = false) Then
				Me.Onord_nombreChanging(value)
				Me.SendPropertyChanging
				Me._ord_nombre = value
				Me.SendPropertyChanged("ord_nombre")
				Me.Onord_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ord_fecha", DbType:="Date")>  _
	Public Property ord_fecha() As System.Nullable(Of Date)
		Get
			Return Me._ord_fecha
		End Get
		Set
			If (Me._ord_fecha.Equals(value) = false) Then
				Me.Onord_fechaChanging(value)
				Me.SendPropertyChanging
				Me._ord_fecha = value
				Me.SendPropertyChanged("ord_fecha")
				Me.Onord_fechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bod_id", DbType:="Int")>  _
	Public Property bod_id() As System.Nullable(Of Integer)
		Get
			Return Me._bod_id
		End Get
		Set
			If (Me._bod_id.Equals(value) = false) Then
				If Me._bodega.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onbod_idChanging(value)
				Me.SendPropertyChanging
				Me._bod_id = value
				Me.SendPropertyChanged("bod_id")
				Me.Onbod_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="orden_compra_detalle_orden", Storage:="_detalle_orden", ThisKey:="ord_id", OtherKey:="ord_id")>  _
	Public Property detalle_orden() As EntitySet(Of detalle_orden)
		Get
			Return Me._detalle_orden
		End Get
		Set
			Me._detalle_orden.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="bodega_orden_compra", Storage:="_bodega", ThisKey:="bod_id", OtherKey:="bod_id", IsForeignKey:=true)>  _
	Public Property bodega() As bodega
		Get
			Return Me._bodega.Entity
		End Get
		Set
			Dim previousValue As bodega = Me._bodega.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._bodega.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._bodega.Entity = Nothing
					previousValue.orden_compra.Remove(Me)
				End If
				Me._bodega.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.orden_compra.Add(Me)
					Me._bod_id = value.bod_id
				Else
					Me._bod_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("bodega")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_detalle_orden(ByVal entity As detalle_orden)
		Me.SendPropertyChanging
		entity.orden_compra = Me
	End Sub
	
	Private Sub detach_detalle_orden(ByVal entity As detalle_orden)
		Me.SendPropertyChanging
		entity.orden_compra = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.origen")>  _
Partial Public Class origen
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ori_id As Integer
	
	Private _ori_nombre As String
	
	Private _ori_direccion As String
	
	Private _bodega As EntitySet(Of bodega)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onori_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onori_idChanged()
    End Sub
    Partial Private Sub Onori_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onori_nombreChanged()
    End Sub
    Partial Private Sub Onori_direccionChanging(value As String)
    End Sub
    Partial Private Sub Onori_direccionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._bodega = New EntitySet(Of bodega)(AddressOf Me.attach_bodega, AddressOf Me.detach_bodega)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ori_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ori_id() As Integer
		Get
			Return Me._ori_id
		End Get
		Set
			If ((Me._ori_id = value)  _
						= false) Then
				Me.Onori_idChanging(value)
				Me.SendPropertyChanging
				Me._ori_id = value
				Me.SendPropertyChanged("ori_id")
				Me.Onori_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ori_nombre", DbType:="VarChar(30)")>  _
	Public Property ori_nombre() As String
		Get
			Return Me._ori_nombre
		End Get
		Set
			If (String.Equals(Me._ori_nombre, value) = false) Then
				Me.Onori_nombreChanging(value)
				Me.SendPropertyChanging
				Me._ori_nombre = value
				Me.SendPropertyChanged("ori_nombre")
				Me.Onori_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ori_direccion", DbType:="VarChar(45)")>  _
	Public Property ori_direccion() As String
		Get
			Return Me._ori_direccion
		End Get
		Set
			If (String.Equals(Me._ori_direccion, value) = false) Then
				Me.Onori_direccionChanging(value)
				Me.SendPropertyChanging
				Me._ori_direccion = value
				Me.SendPropertyChanged("ori_direccion")
				Me.Onori_direccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="origen_bodega", Storage:="_bodega", ThisKey:="ori_id", OtherKey:="ori_id")>  _
	Public Property bodega() As EntitySet(Of bodega)
		Get
			Return Me._bodega
		End Get
		Set
			Me._bodega.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_bodega(ByVal entity As bodega)
		Me.SendPropertyChanging
		entity.origen = Me
	End Sub
	
	Private Sub detach_bodega(ByVal entity As bodega)
		Me.SendPropertyChanging
		entity.origen = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.productos")>  _
Partial Public Class productos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _pro_id As Integer
	
	Private _pro_nombre As String
	
	Private _pro_stock As System.Nullable(Of Integer)
	
	Private _pro_precio As System.Nullable(Of Double)
	
	Private _pro_descripcion As String
	
	Private _pro_marca As String
	
	Private _detalle_orden As EntitySet(Of detalle_orden)
	
	Private _detalle_traslado As EntitySet(Of detalle_traslado)
	
	Private _inventario As EntitySet(Of inventario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onpro_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onpro_idChanged()
    End Sub
    Partial Private Sub Onpro_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onpro_nombreChanged()
    End Sub
    Partial Private Sub Onpro_stockChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onpro_stockChanged()
    End Sub
    Partial Private Sub Onpro_precioChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Onpro_precioChanged()
    End Sub
    Partial Private Sub Onpro_descripcionChanging(value As String)
    End Sub
    Partial Private Sub Onpro_descripcionChanged()
    End Sub
    Partial Private Sub Onpro_marcaChanging(value As String)
    End Sub
    Partial Private Sub Onpro_marcaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._detalle_orden = New EntitySet(Of detalle_orden)(AddressOf Me.attach_detalle_orden, AddressOf Me.detach_detalle_orden)
		Me._detalle_traslado = New EntitySet(Of detalle_traslado)(AddressOf Me.attach_detalle_traslado, AddressOf Me.detach_detalle_traslado)
		Me._inventario = New EntitySet(Of inventario)(AddressOf Me.attach_inventario, AddressOf Me.detach_inventario)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pro_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property pro_id() As Integer
		Get
			Return Me._pro_id
		End Get
		Set
			If ((Me._pro_id = value)  _
						= false) Then
				Me.Onpro_idChanging(value)
				Me.SendPropertyChanging
				Me._pro_id = value
				Me.SendPropertyChanged("pro_id")
				Me.Onpro_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pro_nombre", DbType:="VarChar(30)")>  _
	Public Property pro_nombre() As String
		Get
			Return Me._pro_nombre
		End Get
		Set
			If (String.Equals(Me._pro_nombre, value) = false) Then
				Me.Onpro_nombreChanging(value)
				Me.SendPropertyChanging
				Me._pro_nombre = value
				Me.SendPropertyChanged("pro_nombre")
				Me.Onpro_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pro_stock", DbType:="Int")>  _
	Public Property pro_stock() As System.Nullable(Of Integer)
		Get
			Return Me._pro_stock
		End Get
		Set
			If (Me._pro_stock.Equals(value) = false) Then
				Me.Onpro_stockChanging(value)
				Me.SendPropertyChanging
				Me._pro_stock = value
				Me.SendPropertyChanged("pro_stock")
				Me.Onpro_stockChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pro_precio", DbType:="Float")>  _
	Public Property pro_precio() As System.Nullable(Of Double)
		Get
			Return Me._pro_precio
		End Get
		Set
			If (Me._pro_precio.Equals(value) = false) Then
				Me.Onpro_precioChanging(value)
				Me.SendPropertyChanging
				Me._pro_precio = value
				Me.SendPropertyChanged("pro_precio")
				Me.Onpro_precioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pro_descripcion", DbType:="VarChar(45)")>  _
	Public Property pro_descripcion() As String
		Get
			Return Me._pro_descripcion
		End Get
		Set
			If (String.Equals(Me._pro_descripcion, value) = false) Then
				Me.Onpro_descripcionChanging(value)
				Me.SendPropertyChanging
				Me._pro_descripcion = value
				Me.SendPropertyChanged("pro_descripcion")
				Me.Onpro_descripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pro_marca", DbType:="VarChar(30)")>  _
	Public Property pro_marca() As String
		Get
			Return Me._pro_marca
		End Get
		Set
			If (String.Equals(Me._pro_marca, value) = false) Then
				Me.Onpro_marcaChanging(value)
				Me.SendPropertyChanging
				Me._pro_marca = value
				Me.SendPropertyChanged("pro_marca")
				Me.Onpro_marcaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="productos_detalle_orden", Storage:="_detalle_orden", ThisKey:="pro_id", OtherKey:="pro_id")>  _
	Public Property detalle_orden() As EntitySet(Of detalle_orden)
		Get
			Return Me._detalle_orden
		End Get
		Set
			Me._detalle_orden.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="productos_detalle_traslado", Storage:="_detalle_traslado", ThisKey:="pro_id", OtherKey:="pro_id")>  _
	Public Property detalle_traslado() As EntitySet(Of detalle_traslado)
		Get
			Return Me._detalle_traslado
		End Get
		Set
			Me._detalle_traslado.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="productos_inventario", Storage:="_inventario", ThisKey:="pro_id", OtherKey:="pro_id")>  _
	Public Property inventario() As EntitySet(Of inventario)
		Get
			Return Me._inventario
		End Get
		Set
			Me._inventario.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_detalle_orden(ByVal entity As detalle_orden)
		Me.SendPropertyChanging
		entity.productos = Me
	End Sub
	
	Private Sub detach_detalle_orden(ByVal entity As detalle_orden)
		Me.SendPropertyChanging
		entity.productos = Nothing
	End Sub
	
	Private Sub attach_detalle_traslado(ByVal entity As detalle_traslado)
		Me.SendPropertyChanging
		entity.productos = Me
	End Sub
	
	Private Sub detach_detalle_traslado(ByVal entity As detalle_traslado)
		Me.SendPropertyChanging
		entity.productos = Nothing
	End Sub
	
	Private Sub attach_inventario(ByVal entity As inventario)
		Me.SendPropertyChanging
		entity.productos = Me
	End Sub
	
	Private Sub detach_inventario(ByVal entity As inventario)
		Me.SendPropertyChanging
		entity.productos = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tipo_documento")>  _
Partial Public Class tipo_documento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _tip_id As Integer
	
	Private _tip_nombre As String
	
	Private _documento As EntitySet(Of documento)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ontip_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ontip_idChanged()
    End Sub
    Partial Private Sub Ontip_nombreChanging(value As String)
    End Sub
    Partial Private Sub Ontip_nombreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._documento = New EntitySet(Of documento)(AddressOf Me.attach_documento, AddressOf Me.detach_documento)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tip_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property tip_id() As Integer
		Get
			Return Me._tip_id
		End Get
		Set
			If ((Me._tip_id = value)  _
						= false) Then
				Me.Ontip_idChanging(value)
				Me.SendPropertyChanging
				Me._tip_id = value
				Me.SendPropertyChanged("tip_id")
				Me.Ontip_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tip_nombre", DbType:="VarChar(45)")>  _
	Public Property tip_nombre() As String
		Get
			Return Me._tip_nombre
		End Get
		Set
			If (String.Equals(Me._tip_nombre, value) = false) Then
				Me.Ontip_nombreChanging(value)
				Me.SendPropertyChanging
				Me._tip_nombre = value
				Me.SendPropertyChanged("tip_nombre")
				Me.Ontip_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_documento_documento", Storage:="_documento", ThisKey:="tip_id", OtherKey:="tip_id")>  _
	Public Property documento() As EntitySet(Of documento)
		Get
			Return Me._documento
		End Get
		Set
			Me._documento.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_documento(ByVal entity As documento)
		Me.SendPropertyChanging
		entity.tipo_documento = Me
	End Sub
	
	Private Sub detach_documento(ByVal entity As documento)
		Me.SendPropertyChanging
		entity.tipo_documento = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.traslado")>  _
Partial Public Class traslado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _tra_id As Integer
	
	Private _tra_bodegaEntrada As String
	
	Private _bod_id As System.Nullable(Of Integer)
	
	Private _detalle_traslado As EntitySet(Of detalle_traslado)
	
	Private _bodega As EntityRef(Of bodega)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ontra_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ontra_idChanged()
    End Sub
    Partial Private Sub Ontra_bodegaEntradaChanging(value As String)
    End Sub
    Partial Private Sub Ontra_bodegaEntradaChanged()
    End Sub
    Partial Private Sub Onbod_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onbod_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._detalle_traslado = New EntitySet(Of detalle_traslado)(AddressOf Me.attach_detalle_traslado, AddressOf Me.detach_detalle_traslado)
		Me._bodega = CType(Nothing, EntityRef(Of bodega))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tra_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property tra_id() As Integer
		Get
			Return Me._tra_id
		End Get
		Set
			If ((Me._tra_id = value)  _
						= false) Then
				Me.Ontra_idChanging(value)
				Me.SendPropertyChanging
				Me._tra_id = value
				Me.SendPropertyChanged("tra_id")
				Me.Ontra_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tra_bodegaEntrada", DbType:="VarChar(45)")>  _
	Public Property tra_bodegaEntrada() As String
		Get
			Return Me._tra_bodegaEntrada
		End Get
		Set
			If (String.Equals(Me._tra_bodegaEntrada, value) = false) Then
				Me.Ontra_bodegaEntradaChanging(value)
				Me.SendPropertyChanging
				Me._tra_bodegaEntrada = value
				Me.SendPropertyChanged("tra_bodegaEntrada")
				Me.Ontra_bodegaEntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bod_id", DbType:="Int")>  _
	Public Property bod_id() As System.Nullable(Of Integer)
		Get
			Return Me._bod_id
		End Get
		Set
			If (Me._bod_id.Equals(value) = false) Then
				If Me._bodega.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onbod_idChanging(value)
				Me.SendPropertyChanging
				Me._bod_id = value
				Me.SendPropertyChanged("bod_id")
				Me.Onbod_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="traslado_detalle_traslado", Storage:="_detalle_traslado", ThisKey:="tra_id", OtherKey:="tra_id")>  _
	Public Property detalle_traslado() As EntitySet(Of detalle_traslado)
		Get
			Return Me._detalle_traslado
		End Get
		Set
			Me._detalle_traslado.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="bodega_traslado", Storage:="_bodega", ThisKey:="bod_id", OtherKey:="bod_id", IsForeignKey:=true)>  _
	Public Property bodega() As bodega
		Get
			Return Me._bodega.Entity
		End Get
		Set
			Dim previousValue As bodega = Me._bodega.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._bodega.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._bodega.Entity = Nothing
					previousValue.traslado.Remove(Me)
				End If
				Me._bodega.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.traslado.Add(Me)
					Me._bod_id = value.bod_id
				Else
					Me._bod_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("bodega")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_detalle_traslado(ByVal entity As detalle_traslado)
		Me.SendPropertyChanging
		entity.traslado = Me
	End Sub
	
	Private Sub detach_detalle_traslado(ByVal entity As detalle_traslado)
		Me.SendPropertyChanging
		entity.traslado = Nothing
	End Sub
End Class
